1. Nichts die variable ist unabhängig von dem fort() -> Die variable bleibt so 
   gesetzt wie sie in dem jeweiligen teil gesetzt wurden.


2. Erst schreibt der Parent auf das .txt file und dann das child.
   -> Das zuerst gestartete process muss nicht parent sein!


3. Nein nicht das ich wüsste! Geht aber bestimmt.


4. Es gibt so viele verschiedene versionen von der methode für jeweils
 
   andere übergabe parameter!
   
   -> The differences are combinations of:


    L vs V: whether you want to pass the parameters to the exec'ed program as

    L: individual parameters in the call (variable argument list): execl(),

    execle(), execlp(), and execlpe()

    V: as an array of char* execv(), execve(), execvp(), and execvpe()


    The array format is useful when the number of parameters that are to be sent

    to the exec'ed process are variable -- as in not known in advance, so you

    can't put in a fixed number of parameters in a function call.


    E: The versions with an 'e' at the end let you additionally pass an array of

    char* that are a set of strings added to the spawned processes environment

    before the exec'ed program launches. Yet another way of passing parameters,really.


    P: The versions with 'p' in there use the environment path variable to search

       for the executable file named to execute. The versions without the 'p'

       require an absolute or relative file path to be prepended to the filename

       of the executable if it is not in the current working directory.


5. wait() returned das pid from child
   -> wenn wait() bei child dann returned -1


6. wenn ich mehrere childs/processes hab und auf ein bestimmtes warten will


7. das child kann nicht mehr schreiben.


8. Ka!
