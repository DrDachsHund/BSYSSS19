Questions:

Anmerkung:
	T(turnaround) = T(completion) - T(arrival)
	T(response) = T(firstrun) - T(arrival)

1. FIFO:
	job0-T(turnaround) = 200 - 0 = 200
	job1-T(turnaround) = 400 - 0 = 400
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 200 - 0 = 200
	job2-T(response) = 400 - 0 = 400
   SJF:
	job0-T(turnaround) = 200 - 0 = 200
	job1-T(turnaround) = 400 - 0 = 400
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 200 - 0 = 200
	job2-T(response) = 400 - 0 = 400

ma851kle@ct-bsys-ws18-5:~/BSYS$ ./scheduler.py -p FIFO -j 3 -l 200,200,200 -c
ARG policy FIFO
ARG jlist 200,200,200

Here is the job list, with the run time of each job:
  Job 0 ( length = 200.0 )
  Job 1 ( length = 200.0 )
  Job 2 ( length = 200.0 )


** Solutions **

Execution trace:
  [ time   0 ] Run job 0 for 200.00 secs ( DONE at 200.00 )
  [ time 200 ] Run job 1 for 200.00 secs ( DONE at 400.00 )
  [ time 400 ] Run job 2 for 200.00 secs ( DONE at 600.00 )

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 200.00  Wait 0.00
  Job   1 -- Response: 200.00  Turnaround 400.00  Wait 200.00
  Job   2 -- Response: 400.00  Turnaround 600.00  Wait 400.00

  Average -- Response: 200.00  Turnaround 400.00  Wait 200.00

ma851kle@ct-bsys-ws18-5:~/BSYS$ ./scheduler.py -p SJF -j 3 -l 200,200,200 -c
ARG policy SJF
ARG jlist 200,200,200

Here is the job list, with the run time of each job:
  Job 0 ( length = 200.0 )
  Job 1 ( length = 200.0 )
  Job 2 ( length = 200.0 )


** Solutions **

Execution trace:
  [ time   0 ] Run job 0 for 200.00 secs ( DONE at 200.00 )
  [ time 200 ] Run job 1 for 200.00 secs ( DONE at 400.00 )
  [ time 400 ] Run job 2 for 200.00 secs ( DONE at 600.00 )

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 200.00  Wait 0.00
  Job   1 -- Response: 200.00  Turnaround 400.00  Wait 200.00
  Job   2 -- Response: 400.00  Turnaround 600.00  Wait 400.00

  Average -- Response: 200.00  Turnaround 400.00  Wait 200.00

2. FIFO:
	job0-T(turnaround) = 100- 0 = 100
	job1-T(turnaround) = 300 - 0 = 300
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 100 - 0 = 100
	job2-T(response) = 300 - 0 = 300
   SJF:
	job0-T(turnaround) = 100 - 0 = 100
	job1-T(turnaround) = 300 - 0 = 300
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 300 - 0 = 300
	job2-T(response) = 600 - 0 = 600

ma851kle@ct-bsys-ws18-5:~/BSYS$ ./scheduler.py -p FIFO -j 3 -l 100,200,300 -c
ARG policy FIFO
ARG jlist 100,200,300

Here is the job list, with the run time of each job:
  Job 0 ( length = 100.0 )
  Job 1 ( length = 200.0 )
  Job 2 ( length = 300.0 )


** Solutions **

Execution trace:
  [ time   0 ] Run job 0 for 100.00 secs ( DONE at 100.00 )
  [ time 100 ] Run job 1 for 200.00 secs ( DONE at 300.00 )
  [ time 300 ] Run job 2 for 300.00 secs ( DONE at 600.00 )

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 100.00  Wait 0.00
  Job   1 -- Response: 100.00  Turnaround 300.00  Wait 100.00
  Job   2 -- Response: 300.00  Turnaround 600.00  Wait 300.00

  Average -- Response: 133.33  Turnaround 333.33  Wait 133.33

ma851kle@ct-bsys-ws18-5:~/BSYS$ ./scheduler.py -p SJF -j 3 -l 100,200,300 -c
ARG policy SJF
ARG jlist 100,200,300

Here is the job list, with the run time of each job:
  Job 0 ( length = 100.0 )
  Job 1 ( length = 200.0 )
  Job 2 ( length = 300.0 )


** Solutions **

Execution trace:
  [ time   0 ] Run job 0 for 100.00 secs ( DONE at 100.00 )
  [ time 100 ] Run job 1 for 200.00 secs ( DONE at 300.00 )
  [ time 300 ] Run job 2 for 300.00 secs ( DONE at 600.00 )

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 100.00  Wait 0.00
  Job   1 -- Response: 100.00  Turnaround 300.00  Wait 100.00
  Job   2 -- Response: 300.00  Turnaround 600.00  Wait 300.00

  Average -- Response: 133.33  Turnaround 333.33  Wait 133.33

3. RR: (200,200,200 bei timeslice von 1)
	job0-T(turnaround) = 598 - 0 = 598
	job1-T(turnaround) = 599 - 0 = 599
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 1 - 0 = 1
	job2-T(response) = 2 - 0 = 2

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 598.00  Wait 398.00
  Job   1 -- Response: 1.00  Turnaround 599.00  Wait 399.00
  Job   2 -- Response: 2.00  Turnaround 600.00  Wait 400.00

  Average -- Response: 1.00  Turnaround 599.00  Wait 399.00

   RR: (100,200,300 bei time slice 1)
	job0-T(turnaround) = 298- 0 = 298
	job1-T(turnaround) = 499 - 0 = 499
	job2-T(turnaround) = 600 - 0 = 600
	
	job0-T(response) = 0 - 0 = 0
	job1-T(response) = 1 - 0 = 1
	job2-T(response) = 2 - 0 = 2

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 298.00  Wait 198.00
  Job   1 -- Response: 1.00  Turnaround 499.00  Wait 299.00
  Job   2 -- Response: 2.00  Turnaround 600.00  Wait 300.00

  Average -- Response: 1.00  Turnaround 465.67  Wait 265.67

4. Wenn die jobs eine gleichgrose länge haben oder in der reihenfolge von
   klein nach groß reinkommen.

5. Die quantumlength müsste/dürfte nicht größer sein als der größte job

6. Ja dadurch das die job größe vergrößert wird wird auch die response zeit
   erhöt.

Execution trace:
  [ time   0 ] Run job 0 for 10.00 secs ( DONE at 10.00 )
  [ time  10 ] Run job 1 for 20.00 secs ( DONE at 30.00 )
  [ time  30 ] Run job 2 for 30.00 secs ( DONE at 60.00 )
  [ time  60 ] Run job 3 for 40.00 secs ( DONE at 100.00 )
  [ time 100 ] Run job 4 for 50.00 secs ( DONE at 150.00 )

Final statistics:
  Job   0 -- Response: 0.00  Turnaround 10.00  Wait 0.00
  Job   1 -- Response: 10.00  Turnaround 30.00  Wait 10.00
  Job   2 -- Response: 30.00  Turnaround 60.00  Wait 30.00
  Job   3 -- Response: 60.00  Turnaround 100.00  Wait 60.00
  Job   4 -- Response: 100.00  Turnaround 150.00  Wait 100.00

  Average -- Response: 40.00  Turnaround 70.00  Wait 40.00

7. T(response) = quantum length bei T(arrival) = 0
   jobN-T(response) = quantum length * n-1
